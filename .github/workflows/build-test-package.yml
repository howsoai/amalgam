name: Reusable WF - Build

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string

defaults:
  run:
    shell: bash

jobs:

  build-linux:
    runs-on: ubuntu-20.04
    container:
      image: ghcr.io/howsoai/amalgam-build-container-linux:1.0.0
      credentials:
        username: ${{ github.actor }}
        password: ${{ github.token }}
    strategy:
      matrix:
        preset:
          - arch: amd64
            platform: linux
          - arch: arm64
            platform: linux
          - arch: arm64_8a
            platform: linux
          - arch: wasm64
            platform: linux
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v3

    - name: Set build preset
      run: |
        PRESET=$(echo ${{ matrix.preset.arch }}-release-${{ matrix.preset.platform }})
        echo "PRESET=$(echo $PRESET)" >> $GITHUB_ENV
        echo "Build preset: $PRESET"

    - name: CMake Configure
      run: AMALGAM_BUILD_VERSION=${{ inputs.version }} cmake --preset $PRESET

    - name: CMake Build
      run: cmake --build --preset $PRESET -- --quiet

    - name: CMake Test
      run: cmake --build --preset $PRESET --target test

    - name: CMake Install
      run: cmake --build --preset $PRESET --target install

    - name: CMake Package
      run: cmake --build --preset $PRESET --target package

    - name: Upload Artifact
      uses: actions/upload-artifact@v3
      with:
        name: amalgam-${{ inputs.version }}-${{ matrix.preset.platform }}-${{ matrix.preset.arch }}
        path: ./out/package/amalgam-*.tar.gz
        if-no-files-found: error

  build-macos:
    runs-on: macos-12
    strategy:
      matrix:
        preset:
          - arch: amd64
            build: release
            platform: macos
          - arch: arm64
            build: release
            platform: macos
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v3

    - name: Set build preset
      run: |
        PRESET=$(echo ${{ matrix.preset.arch }}-release-${{ matrix.preset.platform }})
        echo "PRESET=$(echo $PRESET)" >> $GITHUB_ENV
        echo "Build preset: $PRESET"

    - name: Install build dependencies
      run: |
        if [ "${{ matrix.preset.arch }}" = "arm64" ]; then
          brew uninstall --ignore-dependencies libomp
          brew cleanup -s
          rm -rf `brew --cache`
          brew fetch --force --bottle-tag=arm64_monterey libomp
          brew install `brew --cache --bottle-tag=arm64_monterey libomp`
        else
          brew install libomp
        fi
        brew list --versions libomp
        brew install ninja

    - name: CMake Configure
      run: AMALGAM_BUILD_VERSION=${{ inputs.version }} cmake --preset $PRESET

    - name: CMake Build
      run: cmake --build --preset $PRESET -- --quiet

    - name: CMake Test
      run: cmake --build --preset $PRESET --target test

    - name: CMake Install
      run: cmake --build --preset $PRESET --target install

    - name: CMake Package
      run: cmake --build --preset $PRESET --target package

    - name: Upload Artifact
      uses: actions/upload-artifact@v3
      with:
        name: amalgam-${{ inputs.version }}-darwin-${{ matrix.preset.arch }}
        path: ./out/package/amalgam-*.tar.gz
        if-no-files-found: error

  build-windows:
    runs-on: windows-2022
    strategy:
      matrix:
        preset:
          - arch: amd64
            build: release
            platform: windows
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v3

    - name: Set build preset
      run: |
        PRESET=$(echo ${{ matrix.preset.arch }}-release-${{ matrix.preset.platform }})
        echo "PRESET=$(echo $PRESET)" >> $GITHUB_ENV
        echo "Build preset: $PRESET"

    - name: Enable developer commandline tools
      uses: ilammy/msvc-dev-cmd@v1

    - name: Download tz data
      shell: pwsh
      run: ./build/powershell/Download-Tzdata.ps1

    - name: Install build dependencies
      run: choco upgrade ninja

    - name: CMake Configure
      run: AMALGAM_BUILD_VERSION=${{ inputs.version }} cmake --preset $PRESET

    - name: CMake Build
      run: cmake --build --preset $PRESET -- --quiet

    - name: CMake Test
      run: cmake --build --preset $PRESET --target test

    - name: CMake Install
      run: cmake --build --preset $PRESET --target install

    - name: CMake Package
      run: cmake --build --preset $PRESET --target package

    - name: Upload Artifact
      uses: actions/upload-artifact@v3
      with:
        name: amalgam-${{ inputs.version }}-${{ matrix.preset.platform }}-${{ matrix.preset.arch }}
        path: ./out/package/amalgam-*.tar.gz
        if-no-files-found: error

  smoke-test-linux-amd64:
    needs: ['build-linux']
    runs-on: ubuntu-latest
    steps:
    - name: Download Artifact
      uses: actions/download-artifact@v3
      with:
        name: amalgam-${{ inputs.version }}-linux-amd64

    - name: Extract Amalgam
      run: |
        mkdir ./amalgam
        tar -xvf ./amalgam-${{ inputs.version }}-linux-amd64.tar.gz -C ./amalgam

    - name: Smoke test
      run: |
        set -e
        cd ./amalgam/bin
        for f in *; do
          echo -n "$f: " && "./$f" --version
        done

  smoke-test-linux-arm64:
    needs: ['build-linux']
    runs-on: ubuntu-latest
    steps:
    - name: Download Artifact
      uses: actions/download-artifact@v3
      with:
        name: amalgam-${{ inputs.version }}-linux-arm64

    - name: Extract Amalgam
      run: |
        mkdir ./amalgam
        tar -xvf ./amalgam-${{ inputs.version }}-linux-arm64.tar.gz -C ./amalgam

    - name: Smoke test
      uses: pguyot/arm-runner-action@v2
      with:
        base_image: raspios_lite_arm64:latest
        cpu: cortex-a8
        commands: |
          set -e
          PATH=$PATH:/usr/aarch64-linux-gnu
          cd ./amalgam/bin
          for f in *; do
            echo -n "$f: " && "./$f" --version
          done

  smoke-test-linux-arm64_8a:
    needs: ['build-linux']
    runs-on: ubuntu-latest
    steps:
    - name: Download Artifact
      uses: actions/download-artifact@v3
      with:
        name: amalgam-${{ inputs.version }}-linux-arm64_8a

    - name: Extract Amalgam
      run: |
        mkdir ./amalgam
        tar -xvf ./amalgam-${{ inputs.version }}-linux-arm64_8a.tar.gz -C ./amalgam

    - name: Smoke test
      uses: pguyot/arm-runner-action@v2
      with:
        base_image: raspios_lite_arm64:latest
        cpu: cortex-a7
        commands: |
          set -e
          PATH=$PATH:/usr/aarch64-linux-gnu
          cd ./amalgam/bin
          for f in *; do
            echo -n "$f: " && "./$f" --version
          done

  smoke-test-macos-amd64:
    needs: ['build-macos']
    runs-on: macos-latest
    steps:
    - name: Download Artifact
      uses: actions/download-artifact@v3
      with:
        name: amalgam-${{ inputs.version }}-darwin-amd64

    - name: Extract Amalgam
      run: |
        mkdir ./amalgam
        tar -xvf ./amalgam-${{ inputs.version }}-darwin-amd64.tar.gz -C ./amalgam

    # GitHub macOS runner does not support AVX
    - name: Smoke test
      run: |
        set -e
        cd ./amalgam/bin
        for f in *noavx*; do
          echo -n "$f: " && "./$f" --version
        done

  # Turned off until GitHub runners support arm64 macOS
  smoke-test-macos-arm64:
    if: false
    needs: ['build-macos']
    runs-on: macos-latest
    steps:
    - name: Download Artifact
      uses: actions/download-artifact@v3
      with:
        name: amalgam-${{ inputs.version }}-darwin-amd64

    - name: Extract Amalgam
      run: |
        mkdir ./amalgam
        tar -xvf ./amalgam-${{ inputs.version }}-darwin-arm64.tar.gz -C ./amalgam

    - name: Smoke test
      run: |
        set -e
        cd ./amalgam/bin
        for f in *; do
          echo -n "$f: " && "./$f" --version
        done

  smoke-test-windows-amd64:
    needs: ['build-windows']
    runs-on: windows-latest
    steps:
    - name: Download Artifact
      uses: actions/download-artifact@v3
      with:
        name: amalgam-${{ inputs.version }}-windows-amd64

    - name: Extract Amalgam
      run: |
        mkdir ./amalgam
        tar -xvf ./amalgam-${{ inputs.version }}-windows-amd64.tar.gz -C ./amalgam

    - name: Smoke test
      run: |
        set -e
        cd ./amalgam/bin
        for f in *; do
          echo -n "$f: " && "./$f" --version
        done
