name: Reusable WF - Build

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
      build-type:
        required: false
        type: string

defaults:
  run:
    shell: bash

jobs:

  build-linux:
    runs-on: ubuntu-20.04
    container:
      image: ghcr.io/howsoai/amalgam-build-container-linux:1.0.0
      credentials:
        username: ${{ github.actor }}
        password: ${{ github.token }}
    strategy:
      matrix:
        preset:
          - arch: amd64
            platform: linux
          - arch: arm64
            platform: linux
          - arch: arm64_8a
            platform: linux
          - arch: wasm64
            platform: linux
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4

    - name: Set build preset
      run: |
        PRESET=$(echo ${{ matrix.preset.arch }}-release-${{ matrix.preset.platform }})
        echo "PRESET=$(echo $PRESET)" >> $GITHUB_ENV
        echo "Build preset: $PRESET"

    - name: CMake Configure
      run: AMALGAM_BUILD_VERSION=${{ inputs.version }} cmake --preset $PRESET

    - name: CMake Build
      run: cmake --build --preset $PRESET -- --quiet

    - name: CMake Test
      run: cmake --build --preset $PRESET --target test

    - name: CMake Install
      run: cmake --build --preset $PRESET --target install

    - name: CMake Package
      run: cmake --build --preset $PRESET --target package

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: amalgam-${{ inputs.version }}-${{ matrix.preset.platform }}-${{ matrix.preset.arch }}
        path: ./out/package/amalgam-*.tar.gz
        if-no-files-found: error

  build-macos:
    runs-on: macos-12
    strategy:
      matrix:
        preset:
          - arch: amd64
            build: release
            platform: macos
          - arch: arm64
            build: release
            platform: macos
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
  
    - uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Set build preset
      run: |
        PRESET=$(echo ${{ matrix.preset.arch }}-release-${{ matrix.preset.platform }})
        echo "PRESET=$(echo $PRESET)" >> $GITHUB_ENV
        echo "Build preset: $PRESET"

    - name: Install build dependencies
      run: |
        echo "Python version: $(python --version)"
        echo "Brew version: $(brew --version)"
        echo "Brew python installs: $(brew list | grep python)"
        if [ "${{ matrix.preset.arch }}" = "arm64" ]; then
          brew unlink python@3.11
          brew unlink python@3.12
          brew link --force --overwrite python@3.12

          brew uninstall --ignore-dependencies libomp
          brew cleanup -s
          rm -rf `brew --cache`
          brew fetch --force --bottle-tag=arm64_monterey libomp
          brew install `brew --cache --bottle-tag=arm64_monterey libomp` || brew link --overwrite python@3.12
        else
          brew install libomp
        fi
        brew list --versions libomp
        brew install ninja

    - name: CMake Configure
      run: AMALGAM_BUILD_VERSION=${{ inputs.version }} cmake --preset $PRESET

    - name: CMake Build
      run: cmake --build --preset $PRESET -- --quiet

    - name: CMake Test
      run: cmake --build --preset $PRESET --target test

    - name: CMake Install
      run: cmake --build --preset $PRESET --target install

    - name: CMake Package
      run: cmake --build --preset $PRESET --target package

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: amalgam-${{ inputs.version }}-darwin-${{ matrix.preset.arch }}
        path: ./out/package/amalgam-*.tar.gz
        if-no-files-found: error

  build-windows:
    runs-on: windows-2022
    strategy:
      matrix:
        preset:
          - arch: amd64
            build: release
            platform: windows
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4

    - name: Set build preset
      run: |
        PRESET=$(echo ${{ matrix.preset.arch }}-release-${{ matrix.preset.platform }})
        echo "PRESET=$(echo $PRESET)" >> $GITHUB_ENV
        echo "Build preset: $PRESET"

    - name: Enable developer commandline tools
      uses: ilammy/msvc-dev-cmd@v1

    - name: Download tz data
      shell: pwsh
      run: ./build/powershell/Download-Tzdata.ps1

    - name: Install build dependencies
      run: choco upgrade ninja

    - name: CMake Configure
      run: AMALGAM_BUILD_VERSION=${{ inputs.version }} cmake --preset $PRESET

    - name: CMake Build
      run: cmake --build --preset $PRESET -- --quiet

    - name: CMake Test
      run: cmake --build --preset $PRESET --target test

    - name: CMake Install
      run: cmake --build --preset $PRESET --target install

    - name: CMake Package
      run: cmake --build --preset $PRESET --target package

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: amalgam-${{ inputs.version }}-${{ matrix.preset.platform }}-${{ matrix.preset.arch }}
        path: ./out/package/amalgam-*.tar.gz
        if-no-files-found: error

  smoke-test-linux-amd64:
    needs: ['build-linux']
    runs-on: ubuntu-latest
    steps:
    - name: Download Artifact
      uses: actions/download-artifact@v4
      with:
        name: amalgam-${{ inputs.version }}-linux-amd64

    - name: Extract Amalgam
      run: |
        mkdir ./amalgam
        tar -xvf ./amalgam-${{ inputs.version }}-linux-amd64.tar.gz -C ./amalgam

    - name: Smoke test
      run: |
        set -e
        cd ./amalgam/bin
        for f in *; do
          echo -n "$f: " && "./$f" --version
        done

  smoke-test-linux-arm64:
    needs: ['build-linux']
    runs-on: ubuntu-latest
    steps:
    - name: Download Artifact
      uses: actions/download-artifact@v4
      with:
        name: amalgam-${{ inputs.version }}-linux-arm64

    - name: Extract Amalgam
      run: |
        mkdir ./amalgam
        tar -xvf ./amalgam-${{ inputs.version }}-linux-arm64.tar.gz -C ./amalgam

    - name: Smoke test
      uses: pguyot/arm-runner-action@v2
      with:
        base_image: raspios_lite_arm64:latest
        cpu: cortex-a8
        commands: |
          set -e
          PATH=$PATH:/usr/aarch64-linux-gnu
          cd ./amalgam/bin
          for f in *; do
            echo -n "$f: " && "./$f" --version
          done

  smoke-test-linux-arm64_8a:
    needs: ['build-linux']
    runs-on: ubuntu-latest
    steps:
    - name: Download Artifact
      uses: actions/download-artifact@v4
      with:
        name: amalgam-${{ inputs.version }}-linux-arm64_8a

    - name: Extract Amalgam
      run: |
        mkdir ./amalgam
        tar -xvf ./amalgam-${{ inputs.version }}-linux-arm64_8a.tar.gz -C ./amalgam

    - name: Smoke test
      uses: pguyot/arm-runner-action@v2
      with:
        base_image: raspios_lite_arm64:latest
        cpu: cortex-a7
        commands: |
          set -e
          PATH=$PATH:/usr/aarch64-linux-gnu
          cd ./amalgam/bin
          for f in *; do
            echo -n "$f: " && "./$f" --version
          done

  # Uses GitHub default macos runner (amd64)
  # Note: these runners have the potential to not have AVX+ instructions so only run NoAVX binaries
  smoke-test-macos-amd64:
    needs: ['build-macos']
    runs-on: macos-latest
    steps:
    - name: Download Artifact
      uses: actions/download-artifact@v4
      with:
        name: amalgam-${{ inputs.version }}-darwin-amd64

    - name: Extract Amalgam
      run: |
        mkdir ./amalgam
        tar -xvf ./amalgam-${{ inputs.version }}-darwin-amd64.tar.gz -C ./amalgam

    - name: Smoke test
      run: |
        set -e
        cd ./amalgam/bin
        for f in *noavx*; do
          echo -n "$f: " && "./$f" --version
        done

  # Uses GitHub large macos runner (amd64)
  smoke-test-macos-amd64-large:
    needs: ['build-macos']
    runs-on: macos-latest-large
    steps:
    - name: Download Artifact
      uses: actions/download-artifact@v4
      with:
        name: amalgam-${{ inputs.version }}-darwin-amd64

    - name: Extract Amalgam
      run: |
        mkdir ./amalgam
        tar -xvf ./amalgam-${{ inputs.version }}-darwin-amd64.tar.gz -C ./amalgam

    - name: Smoke test
      run: |
        set -e
        cd ./amalgam/bin
        for f in *; do
          echo -n "$f: " && "./$f" --version
        done

  # Uses macOS arm64 xlarge runner (arm64) but execute amd64 binaries
  # Notes:
  #   1) this is supported by Apple through emulator Rossetta 2
  #   2) Rossetta 2 does support AVX+ instructions so only run noavx binaries
  smoke-test-macos-amd64-on-arm64:
    needs: ['build-macos']
    runs-on: macos-latest-xlarge
    steps:
    - name: Download Artifact
      uses: actions/download-artifact@v4
      with:
        name: amalgam-${{ inputs.version }}-darwin-amd64

    - name: Extract Amalgam
      run: |
        mkdir ./amalgam
        tar -xvf ./amalgam-${{ inputs.version }}-darwin-amd64.tar.gz -C ./amalgam

    - name: Smoke test
      run: |
        set -e
        cd ./amalgam/bin
        for f in *noavx*; do
          echo -n "$f: " && "./$f" --version
        done

  # Uses macOS arm64 xlarge runner (arm64)
  smoke-test-macos-arm64:
    needs: ['build-macos']
    runs-on: macos-latest-xlarge
    steps:
    - name: Download Artifact
      uses: actions/download-artifact@v4
      with:
        name: amalgam-${{ inputs.version }}-darwin-arm64

    - name: Extract Amalgam
      run: |
        mkdir ./amalgam
        tar -xvf ./amalgam-${{ inputs.version }}-darwin-arm64.tar.gz -C ./amalgam

    - name: Smoke test
      run: |
        set -e
        cd ./amalgam/bin
        for f in *; do
          echo -n "$f: " && "./$f" --version
        done

  smoke-test-windows-amd64:
    needs: ['build-windows']
    runs-on: windows-latest
    steps:
    - name: Download Artifact
      uses: actions/download-artifact@v4
      with:
        name: amalgam-${{ inputs.version }}-windows-amd64

    - name: Extract Amalgam
      run: |
        mkdir ./amalgam
        tar -xvf ./amalgam-${{ inputs.version }}-windows-amd64.tar.gz -C ./amalgam

    - name: Smoke test
      run: |
        set -e
        cd ./amalgam/bin
        for f in *; do
          echo -n "$f: " && "./$f" --version
        done

  smoke-test-wasm64:
    needs: ['build-linux']
    runs-on: ubuntu-latest
    container: node:18-bullseye-slim
    steps:
    - uses: actions/checkout@v4

    - name: Download Artifact
      uses: actions/download-artifact@v4
      with:
        name: amalgam-${{ inputs.version }}-linux-wasm64

    - name: Extract Amalgam
      run: |
        mkdir ./amalgam
        tar -xvf ./amalgam-${{ inputs.version }}-wasm64.tar.gz -C ./amalgam

    - name: Smoke test
      run: |
        export AMALGAM_WASM_DIR=$(pwd)/amalgam/bin
        cd test/wasm_test
        npm install
        npm run test

  release:
    if: inputs.build-type == 'release'
    needs:
      - smoke-test-linux-amd64
      - smoke-test-linux-arm64
      - smoke-test-linux-arm64_8a
      - smoke-test-macos-amd64
      - smoke-test-macos-amd64-large
      - smoke-test-macos-amd64-on-arm64
      - smoke-test-macos-arm64
      - smoke-test-windows-amd64
      - smoke-test-wasm64
    runs-on: ubuntu-latest
    steps:

    - name: Download Artifacts
      uses: actions/download-artifact@v4

    - name: Create Release
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ inputs.version }}
        commit: ${{ github.sha }}
        name: "Amalgam ${{ inputs.version }}"
        artifactErrorsFailBuild: true
        generateReleaseNotes: true
        makeLatest: legacy
        artifacts: amalgam-*/amalgam-*.tar.gz
        artifactContentType: application/gzip
